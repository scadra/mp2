def groupId = 'com.luxhub.agora'
def groupPath = groupId.replace('.', '/')
def artifactId = 'marketplace-front'
def mvnCoordinates = "${groupId}:${artifactId}:${version}:bin:zip"
def artifactFile = "${artifactId}-${version}-bin.zip"
def snapshotVersion = params.version.endsWith('-SNAPSHOT')
def nexusId = snapshotVersion ? 'nexus-snapshots' : 'nexus-releases'
def nexusUrl = snapshotVersion
    ? 'https://nexus.luxhub.local:9443/repository/maven-snapshots'
    : 'https://nexus.luxhub.local:9443/repository/maven-releases'
def actualLocation = ''
def mvnCmd = 'mvn -s /opt/jenkins/home/maven-settings.xml -B' // TODO replace -B by --no-transfer-progress on Maven 3.6.1+

pipeline {

    agent {
        label 'master'
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'branch', defaultValue: 'master', description: 'Branch to build and release')
        string(name: 'version', defaultValue: '0.0.1-SNAPSHOT', description: 'Artifact version to publish to Nexus')
        choice(name: 'deploy', choices: [
            '',
            '1. DEV Unstable - https://marketplace-din-unstable.luxhub.local/ - port2-dev.luxhub.local:446 - htdoc_mktp_dindix',
            '2. DEV Stable - https://marketplace-din-stable.luxhub.local/ - port1-dev.luxhub.local:446 - htdoc_mktp_dindix',
            '3. STG Unstable - https://marketplace-stg-unstable.luxhub.local/ - port2-dev.luxhub.local:447 - htdoc_mktp_stgstx',
            '4. STG Stable - https://marketplace-stg-stable.luxhub.local/ - port1-dev.luxhub.local:447 - htdoc_mktp_stgstx'
        ], description: 'Server where to deploy')
    }

    stages {
        stage('Dependencies') {
            tools {
                nodejs "nodejs-14.15.0"
            }
            options {
                timeout(time: 20, unit: 'MINUTES')
            }
            steps {
                sh 'git status'
                sh 'node -v'
                sh 'npm --version'
                sh 'npm install'
                // Using this path instead of directly "gridsome info" prevents "command not found" on Jenkins
                sh 'node ./node_modules/gridsome/bin/gridsome.js info'
            }
        }

        stage('Build') {
            tools {
                nodejs "nodejs-14.15.0"
            }
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            steps {
                sh 'npm run build'
                zip dir: 'dist', zipFile: "${artifactFile}", archive: true
                echo "Artifact built and archived: ${artifactFile}"
            }
        }

        // TODO should fail completely if building a release version (non-snapshot)
        stage('QA') {
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            tools {
                nodejs "nodejs-14.15.0"
            }
            steps {
                echo 'Dependency check for vulnerabilities'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'npm audit --audit-level=critical --production --json > report/audit-report.json'
                    // Using this path instead of directly "npm-audit-html" prevents "command not found" on Jenkins
                    sh 'node ./node_modules/npm-audit-html/index.js --output report/audit-report.html < report/audit-report.json'
                    archiveArtifacts 'report/*.*'
                }
                echo 'Source code quality check'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'npm run lint'
                }
                /* FIXME re-enable on first tests added to the project
                    + ensure that test results and coverage are published to Sonar
                echo 'Unit tests with Jest'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'npm run test'
                }*/
            }
        }

        stage('Sonar') {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            tools {
                nodejs "nodejs-14.15.0"
            }
            when {
                expression {
                    params.branch == 'master' || params.branch ==~ /\/master/
                }
            }
            steps {
                echo 'Scan and send to Sonar (incl. vulnerabilities report, only master branch)'
                // Using this path instead of directly "sonar-scanner" prevents "command not found" on Jenkins
                sh 'node node_modules/sonar-scanner/index.js'
            }
        }

        stage('Publish') {
            tools {
                maven 'maven-3.6.0'
            }
            steps {
                echo "Publishing to ${nexusId}"
                script {
                    def packageJson = readJSON file: 'package.json'
                    echo packageJson.name
                    echo packageJson.version
                    echo packageJson.description
                    sh "${mvnCmd} deploy:deploy-file -Dfile=${artifactFile} -DrepositoryId=${nexusId} -Durl=${nexusUrl} -DgroupId=${groupId} -DartifactId=${artifactId} -Dclassifier=bin -Dversion=${version} -Ddescription='${packageJson.description}'"
                    def actualVersion = snapshotVersion
                            ? sh (script: "curl -k ${nexusUrl}/${groupPath}/${artifactId}/${version}/maven-metadata.xml | grep '<value>' | head -1 | sed 's/<value>\\(.*\\)<\\/value>/\\1/'", returnStdout: true).trim()
                            : version;
                    actualLocation = "${nexusUrl}/${groupPath}/${artifactId}/${version}/${artifactId}-${actualVersion}-bin.zip"
                }
                echo "Artifact ${mvnCoordinates} published to ${actualLocation}"
            }
            post {
                success {
                    addEmbeddableBadgeConfiguration(
                            id: "last-${snapshotVersion ? 'snapshot' : 'release'}-version",
                            subject: "Last ${snapshotVersion ? 'Snapshot' : 'Release'} Version",
                            link: actualLocation,
                            status: params.version
                    )
                }
            }
        }

        stage('Deploy') {
            when {
                expression { params.deploy != '' }
            }
            steps {
                echo "Executing deploy job to target ${params.deploy}"
                build job: 'Marketplace-Frontend-Deploy',
                    parameters: [
                        string(name: 'version', value: params.version),
                        string(name: 'target', value: params.deploy)
                    ]
            }
        }
    }

    post {
        always {
            deleteDir()
            script {
                if (!params.deploy && (currentBuild.currentResult == 'SUCCESS' || currentBuild.currentResult == 'UNSTABLE')) {
                    mail subject: "${artifactFile} PUBLISHED to ${nexusId}",
                            from: 'Jenkins <jenkins@luxhub.com>',
                            to: 'patrice.jacquot@luxhub.com',
                            mimeType: 'text/html',
                            body: """
                        <html><body>
                        <h1>${currentBuild.currentResult}: ${env.JOB_BASE_NAME}</h1>
                        <h2>Suggested action</h2>
                        <p>${currentBuild.currentResult == 'SUCCESS' ? 'None, this message is for information only.' : '<a href="' + env.BUILD_URL + 'console">Check job execution log</a> and fix build issues.'}</p>
                        <h2>Execution</h2>
                        <p>
                            <a href="${env.BUILD_URL}">Build <strong>#${env.BUILD_NUMBER}</strong></a> of the job <strong>${env.JOB_NAME}</strong>
                            ran on the branch <strong>${params.branch}</strong>.
                        </p>
                        <h2>Outcome</h2>
                        <p>
                            Artifact <a href="${actualLocation}"><strong>${mvnCoordinates}</a></strong> has been published to <a href="${nexusUrl}">${nexusId}</a>.
                        </p>
                        </body></html>
                      """
                }
            }
        }
    }
}
