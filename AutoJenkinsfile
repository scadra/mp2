pipeline {

    agent any

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(daysToKeepStr: '15', numToKeepStr: '5'))
    }

    triggers {
        gitlab(triggerOnPush: true, branchFilterType: 'All')
    }

    tools {
        nodejs "nodejs-14.15.0"
    }

    stages {
        stage('Dependencies') {
            options {
                timeout(time: 20, unit: 'MINUTES')
            }
            steps {
                sh 'node -v'
                sh 'npm --version'
                sh 'npm install'
            }
        }

        stage('Build') {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            steps {
                sh 'npm run build'
                zip dir: 'dist', zipFile: 'result.zip', archive: true
                //zip dir: 'dist', zipFile: 'result.zip', archive: true
            }
        }

        stage('Report') {
            steps {
                // TODO
                sh 'ls -l dist'
                sh 'ls -l result.zip'
            }
        }
    }

    post {
        unsuccessful {
            script {
                def commitMessage = sh (script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                def commitAuthor = sh (script: 'git log -1 --pretty=%aN', returnStdout: true).trim()
                def commitEmail = sh (script: 'git log -1 --pretty=%aE', returnStdout: true).trim()
                def commitHash = sh (script: 'git log -1 --pretty=%h', returnStdout: true).trim()

                mail subject: "FAILED: ${env.JOB_NAME}/${env.BRANCH_NAME}#${env.BUILD_NUMBER}",
                        from: 'Jenkins <jenkins@luxhub.com>',
                        to: commitEmail,
                        mimeType: 'text/html'
                body: """
                    <html><body>
                    <h1>Job ${env.JOB_NAME} failed (${currentBuild.currentResult})</h1>
                    <p>This is the build #${env.BUILD_NUMBER} on branch ${env.BRANCH_NAME}.</p>
                    <hr/>
                    <p>Commit ${commitHash} by ${commitAuthor}: </p>
                    <pre>${commitMessage}</pre>
                    <hr/>
                    <p>Please <a href="${env.BUILD_URL}console">check the job execution log here</a>.</p>
                    ${previousBuild ? '<p>Previous build on this branch was ' + previousBuild.result + '.</p>' : ''}
                    </body></html>
                  """
            }
        }
        always {
            script {
                def commitMessage = sh (script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                def commitAuthor = sh (script: 'git log -1 --pretty=%aN', returnStdout: true).trim()
                def commitEmail = sh (script: 'git log -1 --pretty=%aE', returnStdout: true).trim()
                def commitHash = sh (script: 'git log -1 --pretty=%h', returnStdout: true).trim()

                mail subject: "FAILED: ${env.JOB_NAME}/${env.BRANCH_NAME}#${env.BUILD_NUMBER}",
                        from: 'Jenkins <jenkins@luxhub.com>',
                        to: commitEmail,
                        mimeType: 'text/html'
                body: """
                    <html><body>
                    <h1>Job ${env.JOB_NAME} failed (${currentBuild.currentResult})</h1>
                    <p>This is the build #${env.BUILD_NUMBER} on branch ${env.BRANCH_NAME}.</p>
                    <hr/>
                    <p>Commit ${commitHash} by ${commitAuthor}: </p>
                    <pre>${commitMessage}</pre>
                    <hr/>
                    <p>Please <a href="${env.BUILD_URL}console">check the job execution log here</a>.</p>
                    ${previousBuild ? '<p>Previous build on this branch was ' + previousBuild.result + '.</p>' : ''}
                    </body></html>
                  """
            }
            deleteDir()
        }
    }
}
