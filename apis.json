{"data": [
  {
    "id": "2007955f-6640-46a4-a400-ce7196e1cebd",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/2007955f-6640-46a4-a400-ce7196e1cebd/image",
    "name": "API Portal TEST (PSD2)",
    "description": "Accenture ICR API",
    "version": "1.0.0",
    "provider": "luxhub",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[luxhub], CAT=[PSD2], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "c1f64fc4-0f26-4d7c-8fc8-d0159d7dde95",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "baloise-test",
    "description": "",
    "version": "1.0",
    "provider": "AGORA",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[AGORA], CAT=[OPEN], STATE=[Published]}",
    "published_date": "08/07/21"
  },
  {
    "id": "8711fb1d-2752-4012-950f-0b97538c9fce",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "donre",
    "description": "This is a template provided by LUXHUB.",
    "version": "1.0.0",
    "provider": "AGORA",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[AGORA], CAT=[OPEN], STATE=[Published]}",
    "published_date": "08/07/21"
  },
  {
    "id": "c97eaed3-bc52-434a-8223-6774ebc58c11",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/c97eaed3-bc52-434a-8223-6774ebc58c11/image",
    "name": "Accenture ICR API(Community)",
    "description": "Accenture Community ICR API",
    "version": "1.0.0",
    "provider": "luxhub",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[luxhub], CAT=[OPEN], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "cc714300-d23e-40b9-8ac2-2cf692938a23",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/cc714300-d23e-40b9-8ac2-2cf692938a23/image",
    "name": "UnifiedAPI-Beta",
    "description": "\nThe LUXHUB One Financial Services API provides a unified interface to access various Providers PSD2 APIs. The API is circumventing the details of PSD2 dedicated implementation of the providers, by establishing a common data model, security profiles and authorization flows. As such, consumers of the LUXHUB One API will be able to easily integrate various PSD2 API providers in a unified way in order to provide easy access for their cusotmers to account information and payment initiation services via PSD2 APIs.\n\n<b>Get Started</b>\n<li> Contact support at developer.luxhub.com to setup your development account, in Sandbox and/or Production mode. \n<li>You will have to provide a pair of eIDAS certificates - QWAC/QSEALC - to identify yourself to financial institutions, i.e. PSD2 API providers\n<p style=\"margin-left:20px\"><i>Note: the certtificates are mandatory for production access and might be required for some providers in sandbox access mode as well. The protocol for creating and exchanging these certificates is described in the get started page on LUXHUB Developer Portal.</i>\n<li>You will be asked to configure a redirect URL where the user of your application will be redirected after performing SCA with the financial institution.\n\n<b>API Authentication</b>\n<p>LUXHUB One supports Client credentials access token and API Key authorization. However API Key is deprecated, thus we recommend the usage of client credentials flow.</p>\n<p>\n  <li>\n    <b>Client Credentials</b>:  In order to access the different endpoints, a header \"Authorization\" containing the access token must be sent for each request.\n    <p style=\"margin-left:20px\">This is an example of the header: <code>Authorization: Bearer ACCESS_TOKEN</code></p>\n  </li>\n  <li><b>API Key (deprecated)</b>: In order to access the different endpoints, a header \"X-API-Key\" must be sent for each request with the API key that was assigned to you. \n  <p style=\"margin-left:20px\">This is an example of the header: <code>X-API-Key: YOUR_API_KEY_VALUE</code></p>\n  <li>All consumers are required to access the API via HTTPS - MTLS is in place for all endpoints; the certificate to be used is issued by LUXHUB Certification Authority.\n</p>\n<b>User Authorisation</b>\n<li>Users of consumer application will need to log in with their financial institutions -the provider- to give explicit consent for your application to access their banking data. In most cases, this will involve redirecting users to their financial institution's authorisation screen. The user is redirected back to the consumer application, on the URL that you have configured for your application when registering for One API - the consumer token (permission-id) will be used in a header for all the subsequent API calls.\n\n<li>For long-lived consent support - using the OAuth2 refresh_token grant, an attempt will be made to refresh the associated access token when requesting financial data with an expired access token.\n<br>\n",
    "version": "1.0.4",
    "provider": "luxhub",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[luxhub], CAT=[PARTNER], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "2a236210-a7d5-4279-8a7a-33d2d4db3965",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/2a236210-a7d5-4279-8a7a-33d2d4db3965/image",
    "name": "SIX-LH1-API",
    "description": "This is the specification of the b.Link API. (as implemented by SIX and used by clients (e.g. third party providers)) \n",
    "version": "2.0",
    "provider": "luxhub",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[luxhub], CAT=[PARTNER], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "dc240af9-d499-4d6a-9c72-83832dd391d0",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "user_api",
    "description": "This is a template provided by LUXHUB.",
    "version": "1.0.0",
    "provider": "AGORA",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[AGORA], CAT=[OPEN], STATE=[Published]}",
    "published_date": "06/07/21"
  },
  {
    "id": "addcf871-1397-4a8c-b5f5-fecc76fae6f5",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "my-product-2",
    "description": "This is a template provided by LUXHUB.",
    "version": "1.0.0",
    "provider": "AGORA",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[AGORA], CAT=[OPEN], STATE=[Published]}",
    "published_date": "06/07/21"
  },
  {
    "id": "f15e6929-f58d-4ab6-bd25-f2a5ae670e8c",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/f15e6929-f58d-4ab6-bd25-f2a5ae670e8c/image",
    "name": "API Portal TEST (PARTNER)",
    "description": "Accenture ICR API",
    "version": "1.0.0",
    "provider": "luxhub",
    "environments": "SANDBOX",
    "categories": "{ASPSP=[luxhub], CAT=[PARTNER], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "ef9589fe-8b6b-4449-9eba-9b0af0d05f20",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/ef9589fe-8b6b-4449-9eba-9b0af0d05f20/image",
    "name": "BO_DEMOLULLBG_BG_EXT",
    "description": "# Standard Implemented\nThis extension is based on Berlin Group 02. BG XS2A Extended Service IG Consent CoF V2.0 20190301.pdf specification, but uses a modified security profile: authorization and security services are provided by LUXHUB.\nThe TPP connects to and is authorized by LUXHUB, the requests are then forwarded towards ASPSP, with the same data but a changed security profile. This is transparent to the TPP.\n\n\n\n\n# Funds Confirmation Services (PIS & PIIS)\nThis functionality foresees the following service:\n* Get confirmation that a specific amount is available (are taken into consideration the remaining account's balance and the periodic limits) on a specific account.\n\nThis service relies on granted consents.\n\nThe Bank implements a permission for consents related to Confirmation of Funds:\n* Allow the TPP to check the fund availability on a specific account.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nKey information:\n * Funds Confirmation will be provided to any registered PIS & PIIS on the condition that the PSU has given explicit consent to ASPSP to respond to requests from this TPP.\n  * Contrary to AIS consents which can include several accounts, one distinct consent must be requested per account for which funds confirmations shall be requested.\n  * The PSU shall authorise these consents with an SCA.\n * There is no side effect with Confirmation of Funds consents. Once a PSU authorises such a consent for a given TPP, the existing Confirmation of Funds consents defined for the same PSU and the same TPP remain valid.\n  * A Confirmation of Funds consent can be revoked by the PSU via the TPP or via the ASPSP. No SCA is required.\n\n# Additional Information\n\n## Some General Remarks Related to the Bank implementation\n* For each call, provide the Bank with a PSU-IP-Address entry in the header. This information should be accurate and not forged in any case.\nShould you do not have the information and do not have any way to retrieve the information (i.e. when no PSU is involved in the call), provide the Bank with the entry with an empty string for value.\n* For communication fields, the Bank supports only the following special characters collection: / - ? ( ) + . : ,\nShould the Bank encounter any other characters, an error will be returned.\n\n## Some general remarks related to this version of the OpenAPI Specification\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n\n\n## General Remarks on Data Types\n\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have\nto support at least the following characters\n\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n0 1 2 3 4 5 6 7 8 9\n\n\n/ - ? : ( ) . , ' +\n\n\nSpace\n",
    "version": "1.20020190215.037.014",
    "provider": "demobg",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobg], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "944c3bf2-6840-48bb-b518-b1444f32b603",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/944c3bf2-6840-48bb-b518-b1444f32b603/image",
    "name": "BO_DEMOESSE_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n\n  Not every message defined in this API definition is necessary for all approaches. \n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some general remarks related to this version of the OpenAPI\n\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n   \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Global Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demoesse",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demoesse], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "ffd36301-119c-4ed6-9bdb-2061e4a5e671",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/ffd36301-119c-4ed6-9bdb-2061e4a5e671/image",
    "name": "BO_DEMOLULLXX3_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some General Remarks Related to this version of the OpenAPI\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n       \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Detailed Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demobank3",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobank3], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "87033478-9970-4571-84f6-4e35ba5ed75c",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/87033478-9970-4571-84f6-4e35ba5ed75c/image",
    "name": "BO_DEMOLULLXX4_BG_EXT",
    "description": "# Standard Implemented\nThis extension is based on Berlin Group 02. BG XS2A Extended Service IG Consent CoF V2.0 20190301.pdf specification, but uses a modified security profile: authorization and security services are provided by LUXHUB.\nThe TPP connects to and is authorized by LUXHUB, the requests are then forwarded towards Banque Raiffeisen, with the same data but a changed security profile. This is transparent to the TPP.\n\n\n\n\n# Funds Confirmation Services (PIIS)\n  * Funds Confirmation will be provided to any registered CBPII on the condition that the PSU has given explicit consent to Banque Raiffeisen to respond to requests from this CBPII.\n  * Contrary to AIS consents which can include several accounts, one distinct consent must be requested per account for which funds confirmations shall be requested.\n  * The PSU shall authorise these consents with an SCA.\n  * A Confirmation of Funds consent does not have any limitation in time.\n  * There is no side effect with Confirmation of Funds consents. Once a PSU authorises such a consent for a given TPP, the existing Confirmation of Funds consents defined for the same PSU and the same TPP remain valid.\n  * A Confirmation of Funds consent can be revoked by the PSU via the TPP or via the ASPSP. No SCA is required.\n\n\n## Some general remarks related to this version of the OpenAPI\n\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n\n\n## General Remarks on Data Types\n\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have\nto support at least the following characters\n\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n0 1 2 3 4 5 6 7 8 9\n\n\n/ - ? : ( ) . , ' +\n\n\nSpace\n",
    "version": "1.20020190215.037.013",
    "provider": "demobank1",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobank1], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "24a84494-2e3f-4c90-ae4a-9263954ee6f8",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/24a84494-2e3f-4c90-ae4a-9263954ee6f8/image",
    "name": "UnifiedAPI",
    "description": "\nThe LUXHUB One Financial Services API provides a unified interface to access various Providers PSD2 APIs. The API is circumventing the details of PSD2 dedicated implementation of the providers, by establishing a common data model, security profiles and authorization flows. As such, consumers of the LUXHUB One API will be able to easily integrate various PSD2 API providers in a unified way in order to provide easy access for their cusotmers to account information and payment initiation services via PSD2 APIs.\n\n<b>Get Started</b>\n<li> Contact support at developer.luxhub.com to setup your development account, in Sandbox and/or Production mode. \n<li>You will have to provide a pair of eIDAS certificates - QWAC/QSEALC - to identify yourself to financial institutions, i.e. PSD2 API providers\n<p style=\"margin-left:20px\"><i>Note: the certtificates are mandatory for production access and might be required for some providers in sandbox access mode as well. The protocol for creating and exchanging these certificates is described in the get started page on LUXHUB Developer Portal.</i>\n<li>You will be asked to configure a redirect URL where the user of your application will be redirected after performing SCA with the financial institution.\n\n<b>API Authentication</b>\n<p>LUXHUB One supports Client credentials access token and API Key authorization. However API Key is deprecated, thus we recommend the usage of client credentials flow.</p>\n<p>\n  <li>\n    <b>Client Credentials</b>:  In order to access the different endpoints, a header \"Authorization\" containing the access token must be sent for each request.\n    <p style=\"margin-left:20px\">This is an example of the header: <code>Authorization: Bearer ACCESS_TOKEN</code></p>\n  </li>\n  <li><b>API Key (deprecated)</b>: In order to access the different endpoints, a header \"X-API-Key\" must be sent for each request with the API key that was assigned to you. \n  <p style=\"margin-left:20px\">This is an example of the header: <code>X-API-Key: YOUR_API_KEY_VALUE</code></p>\n  <li>All consumers are required to access the API via HTTPS - MTLS is in place for all endpoints; the certificate to be used is issued by LUXHUB Certification Authority.\n</p>\n<b>User Authorisation</b>\n<li>Users of consumer application will need to log in with their financial institutions -the provider- to give explicit consent for your application to access their banking data. In most cases, this will involve redirecting users to their financial institution's authorisation screen. The user is redirected back to the consumer application, on the URL that you have configured for your application when registering for One API - the consumer token (permission-id) will be used in a header for all the subsequent API calls.\n\n<li>For long-lived consent support - using the OAuth2 refresh_token grant, an attempt will be made to refresh the associated access token when requesting financial data with an expired access token.\n<br>\n",
    "version": "1.0.4",
    "provider": "luxhub",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[luxhub], CAT=[PARTNER], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "73ca8f2c-44e0-4b98-8c90-109cc335b381",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/73ca8f2c-44e0-4b98-8c90-109cc335b381/image",
    "name": "BO_DEMOMULTISCA_BG_EXT",
    "description": "# Standard Implemented\nThis extension is based on Berlin Group 02. BG XS2A Extended Service IG Consent CoF V2.0 20190301.pdf specification, but uses a modified security profile: authorization and security services are provided by LUXHUB.\nThe TPP connects to and is authorized by LUXHUB, the requests are then forwarded towards ASPSP, with the same data but a changed security profile. This is transparent to the TPP.\n\n\n\n\n# Funds Confirmation Services (PIS & PIIS)\nThis functionality foresees the following service:\n* Get confirmation that a specific amount is available (are taken into consideration the remaining account's balance and the periodic limits) on a specific account.\n\nThis service relies on granted consents.\n\nThe Bank implements a permission for consents related to Confirmation of Funds:\n* Allow the TPP to check the fund availability on a specific account.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nKey information:\n * Funds Confirmation will be provided to any registered PIS & PIIS on the condition that the PSU has given explicit consent to ASPSP to respond to requests from this TPP.\n  * Contrary to AIS consents which can include several accounts, one distinct consent must be requested per account for which funds confirmations shall be requested.\n  * The PSU shall authorise these consents with an SCA.\n * There is no side effect with Confirmation of Funds consents. Once a PSU authorises such a consent for a given TPP, the existing Confirmation of Funds consents defined for the same PSU and the same TPP remain valid.\n  * A Confirmation of Funds consent can be revoked by the PSU via the TPP or via the ASPSP. No SCA is required.\n\n# Additional Information\n\n## Some General Remarks Related to the Bank implementation\n* For each call, provide the Bank with a PSU-IP-Address entry in the header. This information should be accurate and not forged in any case.\nShould you do not have the information and do not have any way to retrieve the information (i.e. when no PSU is involved in the call), provide the Bank with the entry with an empty string for value.\n* For communication fields, the Bank supports only the following special characters collection: / - ? ( ) + . : ,\nShould the Bank encounter any other characters, an error will be returned.\n\n## Some general remarks related to this version of the OpenAPI Specification\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n\n\n## General Remarks on Data Types\n\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have\nto support at least the following characters\n\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n0 1 2 3 4 5 6 7 8 9\n\n\n/ - ? : ( ) . , ' +\n\n\nSpace\n",
    "version": "1.20020190215.037.014",
    "provider": "demomultisca",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demomultisca], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "946af92e-6aa3-4e60-a118-1d935a535c5b",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/946af92e-6aa3-4e60-a118-1d935a535c5b/image",
    "name": "LH-Tool Kit",
    "description": "The LUXHUB Tool kit API provides general purpose end points:<ul><li>**HTTP Signature Verification** aims to help to verify the http signature inspired by to RFC draft-cavage-http-signatures-12</li><li>**PSD HTTP Signature Verification** same above but enforces the certificate validity against QTSP and returns if subcribed information about the requlated signer</li><li>**EIDAS Check** helps to verify if the EIDAS is valid or not</li></ul><br><br><small>**Note :**</small><ul><small>All endpoints require an OAuth2 client credential access token</small></ul><br>",
    "version": "1.0.5",
    "provider": "luxhub",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[luxhub], CAT=[PARTNER], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "cdfd811e-25c4-492b-836b-5e154a68520e",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/cdfd811e-25c4-492b-836b-5e154a68520e/image",
    "name": "Statistics",
    "description": "The LUXHUB Statistics API provides an unified interface to access key performance indicators (KPIs) on service level, availability and performance:<ul><li>**PSD Statistics** group aims compliancy with the contingency mechanism under Article 33(6) of Regulation (EU) 2018/389 (RTS on SCA & CSC)</li></ul><br><br><small>**Note :**<ul><li><small>All endpoints require an OAuth2 client credential access token.</li><li>Each Request retrives a list of items with maximum of 100 records</li></ul><br>",
    "version": "0.1.2",
    "provider": "luxhub",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[luxhub], CAT=[PARTNER], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "5c47bfea-37ef-4ef4-b57d-c112c653a9b6",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "CEDRInternal",
    "description": "The CSSF_LUXHUB API provides the internal APIs to connect to CSSF to get the required details from CSSF<br>",
    "version": "1.00",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "32cbd9f5-cc46-4d53-9677-a9a0a8cee307",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/32cbd9f5-cc46-4d53-9677-a9a0a8cee307/image",
    "name": "BO_DEMOLULLXX2_STET",
    "description": "\n*(based on STET 1.4.1.3)*\n\nSummary\nThis API intends to provide an interface between\n- Account Servicing Payment Service Providers (ASPSP)\n- Third Party (Payment Service) Providers (TPP)\n\nTPP may act with different roles as described below:\n- Account Information Service Providers (AISP)\n- Payment Initiation Service Providers (PISP)\n- Card Based Payment Instrument Issuers (CBPII)\n\nThe Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts\n\nThe API is designed on a REST model using JSON structures.\n\nThe Richardson Maturity Model is applied on level three using HAL HYPERMEDIA links\n \n",
    "version": "1.1413.037.002",
    "provider": "demobank2",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobank2], CAT=[PSD2], ALT_URL=[https://demolullxx2-callback-din.luxhub.local], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "6f2059a0-89d7-4675-9e49-c3167f881cc3",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/6f2059a0-89d7-4675-9e49-c3167f881cc3/image",
    "name": "Marketplace-Backend-API",
    "description": "",
    "version": "1.0",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "1b8440b8-588d-4f9f-a338-2a1be72e241b",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "CEDR",
    "description": "Il permet à la CSSF d'accéder au registre (fichier) qui contient les informations sur les comptes et les coffres-forts des titulaires et bénificiaires au Luxembourg. Cette API ne peut pas être appelée si aucune notification n'a pas été préalablement envoyée à la CSSF pour l'informer qu'un fichier est prêt à être traité. Notification qui doit être envoyée au moins tous les jours à la CSSF. <br/> Hors du champ de la notification envoyée à la CSSF, cette API peut être verrouillée pour éviter toute mauvaise utilisation des systèmes exposés. <br/> L'accès doit être appliqué avec la dernière version TLS (1.3) et l'utilisation de l'authentification TLS mutuelle.",
    "version": "1.0.5",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "904197de-16f9-4e28-84d2-700b7154e27d",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "Agora_oAuth_API",
    "description": "The oAuth api presented by Luxhub follows the following RFC:\n- **Authorization Framework**: https://tools.ietf.org/html/rfc6749\n- **Pushed Authorization Requests**: https://tools.ietf.org/html/draft-ietf-oauth-par-07\n- **Bearer Token Usage**: https://tools.ietf.org/html/rfc6750\n- **JWT Secured Authorization Request (JAR)**: https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-34\n- **Token Introspection**: https://tools.ietf.org/html/rfc7662\n- **Token Revocation**: https://tools.ietf.org/html/rfc7009\n- **Threat Model and Security Considerations**: https://tools.ietf.org/html/rfc6819\n- **Proof Key for Code Exchange by OAuth Public Clients**: https://tools.ietf.org/html/rfc7636\n- **Mutual-TLS Client Authentication and Certificate-Bound** Access Tokenshttps://tools.ietf.org/html/rfc8705\n\nNevertheless some constraint or restriction are enforced in order to meet security feature or business requirements:\n- Only authorization_code and client credential flows are allowed.\n- In case of authorization_code, the user authentication and consent management are managed by the provider\n- POST /authorize is also not supported.\n- Currently MTLS authentication is not supported\n",
    "version": "0.1.8",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "9e456326-6b5e-4862-b240-0c67c1034304",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/9e456326-6b5e-4862-b240-0c67c1034304/image",
    "name": "Agora_Internal_API",
    "description": "Api Documentation",
    "version": "1.0",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "18bbec65-7c33-4d08-8f6f-117744162344",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/18bbec65-7c33-4d08-8f6f-117744162344/image",
    "name": "BO_DEMOESSE_BG_EXT",
    "description": "# Standard Implemented\nThis extension is based on Berlin Group 02. BG XS2A Extended Service IG Consent CoF V2.0 20190301.pdf specification, but uses a modified security profile: authorization and security services are provided by LUXHUB.\nThe TPP connects to and is authorized by LUXHUB, the requests are then forwarded towards ASPSP, with the same data but a changed security profile. This is transparent to the TPP.\n\n\n\n\n# Funds Confirmation Services (PIS & PIIS)\nThis functionality foresees the following service:\n* Get confirmation that a specific amount is available (are taken into consideration the remaining account's balance and the periodic limits) on a specific account.\n\nThis service relies on granted consents.\n\nThe Bank implements a permission for consents related to Confirmation of Funds:\n* Allow the TPP to check the fund availability on a specific account.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nKey information:\n * Funds Confirmation will be provided to any registered PIS & PIIS on the condition that the PSU has given explicit consent to ASPSP to respond to requests from this TPP.\n  * Contrary to AIS consents which can include several accounts, one distinct consent must be requested per account for which funds confirmations shall be requested.\n  * The PSU shall authorise these consents with an SCA.\n * There is no side effect with Confirmation of Funds consents. Once a PSU authorises such a consent for a given TPP, the existing Confirmation of Funds consents defined for the same PSU and the same TPP remain valid.\n  * A Confirmation of Funds consent can be revoked by the PSU via the TPP or via the ASPSP. No SCA is required.\n\n# Additional Information\n\n## Some General Remarks Related to the Bank implementation\n* For each call, provide the Bank with a PSU-IP-Address entry in the header. This information should be accurate and not forged in any case.\nShould you do not have the information and do not have any way to retrieve the information (i.e. when no PSU is involved in the call), provide the Bank with the entry with an empty string for value.\n* For communication fields, the Bank supports only the following special characters collection: / - ? ( ) + . : ,\nShould the Bank encounter any other characters, an error will be returned.\n\n## Some general remarks related to this version of the OpenAPI Specification\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n\n\n## General Remarks on Data Types\n\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have\nto support at least the following characters\n\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n0 1 2 3 4 5 6 7 8 9\n\n\n/ - ? : ( ) . , ' +\n\n\nSpace\n",
    "version": "1.20020190215.037.014",
    "provider": "demoesse",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demoesse], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "94b04eb5-cb42-492f-b626-3f2022f63720",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/94b04eb5-cb42-492f-b626-3f2022f63720/image",
    "name": "Sandbox_Internal_API",
    "description": "API documentation",
    "version": "1.0.0",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "a01fa75c-6ba4-476f-9cd8-128f02add709",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/a01fa75c-6ba4-476f-9cd8-128f02add709/image",
    "name": "SYS_LUXHUB_SYSTEM (Internal)",
    "description": "\nThe API-Gateway Tools API provides some shortcuts in order to survey the api-gateway<br>This interface is a complement to API-Gateway manager and API-Manager<p><b>The acces to the api is granted to</b><li>well known application via api key<li>registered users that are administrator or member of an authorized group</li><br>",
    "version": "1.34",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "35ad0251-f726-4e50-9fad-ae9f1c7c4e74",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/35ad0251-f726-4e50-9fad-ae9f1c7c4e74/image",
    "name": "BO_DEMOERBK_BG_EXT",
    "description": "# Standard Implemented\nThis extension is based on Berlin Group 02. BG XS2A Extended Service IG Consent CoF V2.0 20190301.pdf specification, but uses a modified security profile: authorization and security services are provided by LUXHUB.\nThe TPP connects to and is authorized by LUXHUB, the requests are then forwarded towards ASPSP, with the same data but a changed security profile. This is transparent to the TPP.\n\n\n\n\n# Funds Confirmation Services (PIS & PIIS)\nThis functionality foresees the following service:\n* Get confirmation that a specific amount is available (are taken into consideration the remaining account's balance and the periodic limits) on a specific account.\n\nThis service relies on granted consents.\n\nThe Bank implements a permission for consents related to Confirmation of Funds:\n* Allow the TPP to check the fund availability on a specific account.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nKey information:\n * Funds Confirmation will be provided to any registered PIS & PIIS on the condition that the PSU has given explicit consent to ASPSP to respond to requests from this TPP.\n  * Contrary to AIS consents which can include several accounts, one distinct consent must be requested per account for which funds confirmations shall be requested.\n  * The PSU shall authorise these consents with an SCA.\n * There is no side effect with Confirmation of Funds consents. Once a PSU authorises such a consent for a given TPP, the existing Confirmation of Funds consents defined for the same PSU and the same TPP remain valid.\n  * A Confirmation of Funds consent can be revoked by the PSU via the TPP or via the ASPSP. No SCA is required.\n\n# Additional Information\n\n## Some General Remarks Related to the Bank implementation\n* For each call, provide the Bank with a PSU-IP-Address entry in the header. This information should be accurate and not forged in any case.\nShould you do not have the information and do not have any way to retrieve the information (i.e. when no PSU is involved in the call), provide the Bank with the entry with an empty string for value.\n* For communication fields, the Bank supports only the following special characters collection: / - ? ( ) + . : ,\nShould the Bank encounter any other characters, an error will be returned.\n\n## Some general remarks related to this version of the OpenAPI Specification\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n\n\n## General Remarks on Data Types\n\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have\nto support at least the following characters\n\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n0 1 2 3 4 5 6 7 8 9\n\n\n/ - ? : ( ) . , ' +\n\n\nSpace\n",
    "version": "1.20020190215.037.002",
    "provider": "demoerbk",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demoerbk], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "f918b532-4b8a-4c25-a451-b62b4a1e0475",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/f918b532-4b8a-4c25-a451-b62b4a1e0475/image",
    "name": "BO_DEMOMULTISCA_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some General Remarks Related to this version of the OpenAPI\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n       \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Detailed Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demomultisca",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demomultisca], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "0bbdb82e-2032-4e7b-a83c-dd9a84a03b71",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/0bbdb82e-2032-4e7b-a83c-dd9a84a03b71/image",
    "name": "BO_DEMOLULLBG_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some General Remarks Related to this version of the OpenAPI\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n       \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Detailed Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demolullbg",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demolullbg], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "5932d74d-f839-474e-84ab-47de4ec6c368",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/5932d74d-f839-474e-84ab-47de4ec6c368/image",
    "name": "BO_DEMOLULLXX1_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some General Remarks Related to this version of the OpenAPI\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n       \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Detailed Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demobank1",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobank1], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "74bf7275-9346-4774-ac95-8d3b490e5b29",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/74bf7275-9346-4774-ac95-8d3b490e5b29/image",
    "name": "BO_DEMOLULLXX1_BG_EXT",
    "description": "# Standard Implemented\nThis extension is based on Berlin Group 02. BG XS2A Extended Service IG Consent CoF V2.0 20190301.pdf specification, but uses a modified security profile: authorization and security services are provided by LUXHUB.\nThe TPP connects to and is authorized by LUXHUB, the requests are then forwarded towards ASPSP, with the same data but a changed security profile. This is transparent to the TPP.\n\n\n\n\n# Funds Confirmation Services (PIS & PIIS)\nThis functionality foresees the following service:\n* Get confirmation that a specific amount is available (are taken into consideration the remaining account's balance and the periodic limits) on a specific account.\n\nThis service relies on granted consents.\n\nThe Bank implements a permission for consents related to Confirmation of Funds:\n* Allow the TPP to check the fund availability on a specific account.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nKey information:\n * Funds Confirmation will be provided to any registered PIS & PIIS on the condition that the PSU has given explicit consent to ASPSP to respond to requests from this TPP.\n  * Contrary to AIS consents which can include several accounts, one distinct consent must be requested per account for which funds confirmations shall be requested.\n  * The PSU shall authorise these consents with an SCA.\n * There is no side effect with Confirmation of Funds consents. Once a PSU authorises such a consent for a given TPP, the existing Confirmation of Funds consents defined for the same PSU and the same TPP remain valid.\n  * A Confirmation of Funds consent can be revoked by the PSU via the TPP or via the ASPSP. No SCA is required.\n\n# Additional Information\n\n## Some General Remarks Related to the Bank implementation\n* For each call, provide the Bank with a PSU-IP-Address entry in the header. This information should be accurate and not forged in any case.\nShould you do not have the information and do not have any way to retrieve the information (i.e. when no PSU is involved in the call), provide the Bank with the entry with an empty string for value.\n* For communication fields, the Bank supports only the following special characters collection: / - ? ( ) + . : ,\nShould the Bank encounter any other characters, an error will be returned.\n\n## Some general remarks related to this version of the OpenAPI Specification\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n\n\n## General Remarks on Data Types\n\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have\nto support at least the following characters\n\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n0 1 2 3 4 5 6 7 8 9\n\n\n/ - ? : ( ) . , ' +\n\n\nSpace\n",
    "version": "1.20020190215.037.014",
    "provider": "demobank1",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobank1], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "c3884c51-efba-4120-85f7-8b6ec66dbed5",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/c3884c51-efba-4120-85f7-8b6ec66dbed5/image",
    "name": "Accenture ICR API",
    "description": "ICR SaaS api (generated on 2021-04-12T14:43:19.626681)",
    "version": "2.0.2",
    "provider": "luxhub",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[luxhub], CAT=[OPEN], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "6db1ec9f-bafb-4855-9b3f-668d7eb8ab77",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/6db1ec9f-bafb-4855-9b3f-668d7eb8ab77/image",
    "name": "BO_DEMOMULTIBIC_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some General Remarks Related to this version of the OpenAPI\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n       \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Detailed Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demomultibic",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demomultibic], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "5b361f61-d1df-46e1-aaee-8e5ce280f221",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/5b361f61-d1df-46e1-aaee-8e5ce280f221/image",
    "name": "BO_DEMOERBK_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\nThis API intends to provide an interface between\n- Eurobank Private Bank Luxembourg (ASPSP)\n- LUXHUB\n\n**LUXHUB provides authorisation and security services for the APSPS. PSD2 TPPs are connecting and are authorized by LUXHUB and their requests are forwarded towards the ASPSP, with same data and a changed security profile.**\n\n**This API is modeled using Berlin Group v1.3 as a base, with changed security profile. There is no modification of request/response messages whatsoever, compared to the base API, except for:**\n- additional HTTP headers: \n  - LH-PSU-Token - to pass PSU and related entities identifiers\n  - LH-Correlation-ID - unique request identifier set by LUXHUB firewall\n\n**The API documentation below is as per base API, i.e. Berlin Group standard API**\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe Bank has decided to opt for the following approach in term of authentication and authorisation:\n  * Redirect SCA Approach with explicit authorisation\n\nPSU will be redirected to the Bank interface to perform the SCA. This mechanism, as for the other features governed by PSD2, provides the same experience as the e-banking.\n\nEurobank Private Bank Luxembourg XS2A API provides three main functionalities:\n* Account Information Service (AIS)\n* Payment Initiation Service (PIS)\n* Confirmation of Funds Service (PIS & PIIS)\n\nThese functionalities relied on the management of consents and are authorized through the SCA Process with a dynamic linking.\n\n# Account Information Service (AIS)\nThis functionality foresees different types of services:\n\n- Provide a list of available accounts, including balance if applicable;\n- Provide the balances of a given account;\n- Provide transaction reports for a given account including balances if applicable;\n- Provide Account details of a given account or of the list of all accessible accounts.\n\nAll these services rely on granted consent(s).\n\nThe Bank implements the detailed consent model described in the Berlin Group PSD2 API.\n\nThe Bank implement six types of permissions for consents related to Account Information:\n\n- Be able to list of all available accounts;\n- Be able to list of all available accounts with their balances;\n- Be able to get access to detailed information of specified account(s);\n- Be able to get access to balances of specified account(s);\n- Be able to get access to transactions of specified account(s);\n- All the above permissions as one on all available accounts.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nThe maximum consent duration is 90 days.\n\nWhen a consent is authorised by a PSU, previously authorised consents providing the same permissions for the same PSU and same TPP are automatically revoked.\n\nWhen an account information request is initiated with empty list for balances and transactions fields, PSU will be prompted to select the permission he wants to set during the SCA phase.\n\n# Payment Initiation Service (PIS)\nThis functionality foresees the following types of payments:\n- Regular payments;\n- Regular payments initiated with the 4-eyes principle;\n\n- Future payments;\n- Future payments initiated with the 4-eyes principle;\n\n- Recurring payments (i.e. Standing Orders);\n- Recurring payments (i.e. Standing Orders) initiated with the 4-eyes principle;\n\nTo ease the TPPs' integration, the Bank has decided to provide a unified payment product:\n* The **\"standard-credit-transfers\"**.\n\nThe Bank offers to the TPP to initiate payments between accounts sharing the same currency :\n* When the creditor account is an internal account, the Bank performs a consistency currency check toward the debtor account prior each payment;\n* When the creditor account is an external account, the currency (if specified) has to match the debtor account currency.\n\n For the payment initiation purpose, the Bank use the \".\" as decimal separator.\nAll other formating characters like space, comma, apostrophe, etc. will be ignored.\n\nThe activation of the 4-eyes principle is enforced based on the PSU roles and powers defined in the systems of the Bank.\n\nPayments will need to be authorised following the Berlin Group \"explicit authorisation\" process. Depending on PSU's profile, payments may require an additional validation by an other PSU (based on multilevel SCA).\n\n*The payment life-cycle can be summarised as follow.*\n\nWhen a payment is initiated, the status is:\n* \"Received\" (RCVD): payment is received but has not been authorised.\n\nAfter the first authorisation, the status can be:\n* \"Accepted Customer Profile\" (ACCP): Preceding check of technical validation was successful. Customer profile check was also successful;\n* \"Partially accepted, technically correct\" (PATC): authorisation succeeded, but a second PSU needs to authorise the payment;\n* \"Pending\" (PNDG): Authorisation succeeded, and the payment has to be processed in the future or was initiated post Bank's cut-off time;\n* \"Cancelled\" (CANC): The authorisation has been cancelled by the approver (PSU);\n* \"Rejected\" (RJCT): the authorisation failed or there was not enough available funds (c.f. Confirmation of Funds section below) on the account at execution time.\n\nDuring the SCA phase, should the PSU initiate a first payment through a specific TPP, the Bank display a dedicated message to the PSU and upon his validation the Bank store for the PSU a consent with the following permission:\n* Allow the TPP as a PIS to initiate payment.\nThis consent is valid for 90 days and it is revocable at any time by the PSU through the e-Banking consents’ dedicated interface.\n\n(optional) TPP needs to initiate an additional authorisation request for the payment in status \"Partially accepted, technically correct\" (PATC).\n\nAfter the additional authorisation, the payment's status can be:\n* \"Accepted Customer Profile\" (ACCP): Preceding check of technical validation was successful. Customer profile check was also successful;\n* \"Pending\" (PNDG): Authorisation succeeded, and the payment has to be processed in the future or was initiated post Bank cut-off time;\n* \"Cancelled\" (CANC): The authorisation has been cancelled by the approver (PSU);\n* \"Rejected\" (RJCT): the authorisation failed or there was not enough available funds (c.f. Confirmation of Funds section below) on the account at execution time.\n\nWhen the set of validations related to the payment is successful, the status change for: \"Accepted Funds Checked\" (ACFC) meaning the payment passed the technical validation, the customer profile validation and the automatic funds check.\n\nWhen the payment starts to be processed, the status change for: \"Accepted Settlement In Process\" (ACSP) meaning that all preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.\n\nOnce the payment is processed with success, the status will be updated to \"Accepted Settlement Completed\" (ACSC) meaning the payment has been executed on the Bank side.\n\nWhen a payment is initiated without the debatorAccount field, PSU will be prompted to select it during the SCA phase.\n\nNotes:* If the payment date is in the future, payment will be pending until it reaches the payment date.\n* If the payment date is in the past, the payment will be rejected.\n* The ACCC status is not part of the Bank scope. The ACSC status should be considered as final.\n\n# Confirmation of Funds Service (PIS & PIIS)\nThis functionality foresees the following service:\n* Get confirmation that a specific amount is available (are taken into consideration the remaining account balance and the periodic limits) on a specific account.\n\nThis service relies on granted consent.\n\nThe Bank implements a permission for consents related to Confirmation of Funds:\n* Allow the TPP to check the fund availability on a specific account.\n\nConsents will need to be authorised following the Berlin Group “Redirect SCA Approach: explicit Start of the Authorisation” process.\n\nThe implementation follows the Berlin Group NextGenPSD2 Framework Version 2.0 implementations guidelines.\nPlease refer to the dedicated swagger.\n# Additional Information\n## Some General Remarks Related to the Bank implementation\n* For each call, provide the Bank with a PSU-IP-Address entry in the header. This information should be accurate and not forged in any case.\nShould you do not have the information and do not have any way to retrieve the information (i.e. when no PSU is involved in the call), provide the Bank with the entry with an empty string for value.\n* The Bank limits payment initiation to an amount of 99 999 999 EUR maximum.\nShould an amount is provided with more than two (2) decimals, the amount will be truncated to keep only two (2) digits.\n* For communication fields, the Bank supports only the following special characters collection: / - ? ( ) + . : ,\nShould the Bank encounter any other characters, an error will be returned.\n## Some General Remarks Related to this version of the OpenAPI Specification:\n* **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n  It is not an replacement in any sense.\n  The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n* **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n* **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n* According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]\n  \n    \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"\n  \n  The element \"Accept\" will not be defined in this file at any place.\n  \n  The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".\n  \n* There are several predefined types which might occur in payment initiation messages, \n  but are not used in the standard JSON messages in the Implementation Guidelines.\n  Therefore they are not used in the corresponding messages in this file either.\n  We added them for the convenience of the user.\n  If there is a payment product, which need these field, one can easily use the predefined types.\n  But the ASPSP need not to accept them in general.\n  \n* **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) \n  except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n   \n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.023",
    "provider": "demoerbk",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demoerbk], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "634f72de-f566-449c-bac6-95ee7f24c0bb",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/634f72de-f566-449c-bac6-95ee7f24c0bb/image",
    "name": "Third Party Management API",
    "description": "The LUXHUB Third Party Management provides: <li> an OAuth2 like ''Dynamic Client Registration'' mechanism for 3rd Party registration to LUXHUB Platform and, <li> an API to users, applications and API access for the respective 3rd Party, with similar capabilities  as via the LUXHUB Developer Portal.<br><br>All endpoints require MTLS authentication.<br><br>All endpoints, except Dynamic Client Registration (POST /register), require: <li> either an OAuth2 client credential access token or,</li> <li>basic authentication with user name and password, if an user exists.</li> <br><br> The normal flow of calls from a 3rd Party to obtain access to the LUXHUB Platform exposed APIs is: <li>POST /register to obtain a (client_id, client_secret) pair and have an organization created on the platform <li>GET /apis to get the list of available APIs on the platform <li>PUT /register/apis to update the list of accessible APIs for a 3rd Party <li>GET /register/code to obtain a registration code, which will enable user creation for LUXHUB Developer Portal access <li>POST /register/user creates a user for LUXHUB Developer Portal <li>GET /apis/{id}/image obtains image/logo of the respective API <li>GET /apis/{id}/swagger obtains OpenAPI 2/swagger file describing the respective API.\n<br>Promotion of an organization/application from Sandbox (pending) to Production (qualified) is not available in this version.\n",
    "version": "1.037.015",
    "provider": "luxhub",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[luxhub], CAT=[LH-MANAGEMENT], STATE=[Published]}",
    "published_date": "09/07/21"
  },
  {
    "id": "1441fcbd-90ec-46df-aefb-1fa1e91afc2d",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/1441fcbd-90ec-46df-aefb-1fa1e91afc2d/image",
    "name": "Agora_CMS_API",
    "description": "Api Documentation",
    "version": "1.0",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "4750df4d-cf03-4658-b693-95077a74f874",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/4750df4d-cf03-4658-b693-95077a74f874/image",
    "name": "SYS-LUXHUB_API_MANAGER_DELTA_v_1_4",
    "description": "Version 1.4 of the API Manager Rest API",
    "version": "1.4.0",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "b85e874b-0abf-4c6b-b315-33305a1d98fb",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/b85e874b-0abf-4c6b-b315-33305a1d98fb/image",
    "name": "BO_DEMOLULLXX4_BG",
    "description": "*(based on Berlin Group 1.3.2.20190215)*\n\n# Summary\nThe **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of \nApplication Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. \nThe NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards \nin Europe and, aligned with the goals of the Euro Retail Payments Board,\nenables European banking customers to benefit from innovative products and services ('Banking as a Service') \nby granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.\n\nThe possible Approaches are:\n  * Redirect SCA Approach\n  Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional\n  Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support \n  a certain subset of the methods defined in this API definition.\n\n  **Please have a look at the implementation guidelines if you are not sure \n  which message has to be used for the approach you are going to use.**\n\n## Some General Remarks Related to this version of the OpenAPI\nSpecification:\n  * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.** \n      It is not a replacement in any sense.\n      The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.\n  * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**\n  * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**\n  * The API is documented using [Swagger 2 specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)\n  * There are several predefined types which might occur in payment initiation\n    messages, but are not used in the standard JSON messages in the Implementation Guidelines.\n   Therefore they are not used in the corresponding messages in this file either. We added them for the convenience of the user. If there is a payment product, which need these field, one can easily use the predefined types. But the ASPSP need not to accept them in general.\n  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional) except they are mention in the Implementation Guidelines.**\n  Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.\n       \n## Consent Models\nTo be able to use AISP services a PSU needs to give consent to a TPP to access his accounts. The following consent models are supported :\n* Detailed Consent Model\n\nPlease refer to LUXHUB’s [Get Started Guide](/get-started) to learn more about the consent models.\n\n## General Remarks on Data Types\n\nThe Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n0 1 2 3 4 5 6 7 8 9\n\n/ - ? : ( ) . , ' +\n\nSpace\n",
    "version": "1.13220190215.037.003",
    "provider": "demobank1",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demobank1], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "36a04796-e997-49ec-a1e8-c37177b819a5",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/36a04796-e997-49ec-a1e8-c37177b819a5/image",
    "name": "SYS-LUXHUB_API_MANAGER_DELTA_v_1_4_1",
    "description": "Version 1.4.1 of the API Manager Rest API",
    "version": "1.4.1",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "4b990500-5a9e-475f-986e-dec8c3fe9562",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/4b990500-5a9e-475f-986e-dec8c3fe9562/image",
    "name": "SYS_LUXHUB_SYSTEM",
    "description": "\nThe API-Gateway Tools API provides some shortcuts in order to survey the api-gateway<br>This interface is a complement to API-Gateway manager and API-Manager<p><b>The acces to the api is granted to</b><li>well known application via api key<li>registered users that are administrator or member of an authorized group</li><br>",
    "version": "1.32",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  },
  {
    "id": "bfbcf7c3-117d-46db-a519-546b3805d050",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/bfbcf7c3-117d-46db-a519-546b3805d050/image",
    "name": "Sandbox_Permission_API",
    "description": "# LUXHUB Consent Management System Generic REST API.\n",
    "version": "0.0.1",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{CAT=[Permission-Service]}",
    "published_date": "09/07/21"
  },
  {
    "id": "77e180f3-a498-419e-8311-67820c05d644",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "BO_DEMOLULLSTET_STET_1.5",
    "description": "This API intends to provide an interface between\n- Account Servicing Payment Service Providers (ASPSP)\n- Third Party (Payment Service) Providers (TPP)\n\nTPP may act with different roles as described below:\n- Account Information Service Providers (AISP)\n- Payment Initiation Service Providers (PISP)\n- Card Based Payment Instrument Issuers (CBPII)\n\nThe Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts\n\nThe API is designed on a REST model using JSON structures.\n\nThe Richardson Maturity Model is applied on level three using HAL HYPERMEDIA links\n",
    "version": "1.5.0.43",
    "provider": "demolullstet",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demolullstet], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "e477ef38-801b-43bf-abef-213ad208d6b0",
    "logo": "https://apgf1-dev.luxhub.local:20065null",
    "name": "BO_DEMOLULLSTET_STET",
    "description": "\n*(based on STET 1.4.1.3)*\n\nSummary\nThis API intends to provide an interface between\n- Account Servicing Payment Service Providers (ASPSP)\n- Third Party (Payment Service) Providers (TPP)\n\nTPP may act with different roles as described below:\n- Account Information Service Providers (AISP)\n- Payment Initiation Service Providers (PISP)\n- Card Based Payment Instrument Issuers (CBPII)\n\nThe Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts\n\nThe API is designed on a REST model using JSON structures.\n\nThe Richardson Maturity Model is applied on level three using HAL HYPERMEDIA links\n \n",
    "version": "1.1413.037.002",
    "provider": "demolullstet",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{ASPSP=[demolullstet], CAT=[PSD2], ALT_URL=[N/A], STATE=[Published], PASSPORT=[LU]}",
    "published_date": "09/07/21"
  },
  {
    "id": "019a0d52-0abc-4a14-8c20-a32a462219ad",
    "logo": "https://apgf1-dev.luxhub.local:20065/api/portal/v1.4/discovery/swagger/apis/019a0d52-0abc-4a14-8c20-a32a462219ad/image",
    "name": "Agora-Participants-API",
    "description": "This API is designed to provide additional information related to consumers and applications used to connect to a given API",
    "version": "1.0",
    "provider": "",
    "environments": "SANDBOX, PRODUCTION",
    "categories": "{}",
    "published_date": "09/07/21"
  }
]
}