package doc

//The global script scope
def ctx = context(scope: scriptScope())
contributor(ctx) {
method(name: 'acceptGitLabMR', type: 'Object', params: [:], doc: 'Accept GitLab Merge Request')
method(name: 'acceptGitLabMR', type: 'Object', namedParams: [parameter(name: 'mergeCommitMessage', type: 'java.lang.String'), parameter(name: 'useMRDescription', type: 'boolean'), parameter(name: 'removeSourceBranch', type: 'boolean'), ], doc: 'Accept GitLab Merge Request')
method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', params: [id:'java.lang.String'], doc: 'Add an Embeddable Badge Configuration')
method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'animatedOverlayColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), ], doc: 'Add an Embeddable Badge Configuration')
method(name: 'addGitLabMRComment', type: 'Object', params: [:], doc: 'Add comment on GitLab Merge Request')
method(name: 'addGitLabMRComment', type: 'Object', namedParams: [parameter(name: 'comment', type: 'java.lang.String'), ], doc: 'Add comment on GitLab Merge Request')
method(name: 'archiveZap', type: 'Object', namedParams: [parameter(name: 'failAllAlerts', type: 'java.lang.Integer'), parameter(name: 'failHighAlerts', type: 'java.lang.Integer'), parameter(name: 'failMediumAlerts', type: 'java.lang.Integer'), parameter(name: 'failLowAlerts', type: 'java.lang.Integer'), parameter(name: 'falsePositivesFilePath', type: 'java.lang.String'), ], doc: 'Create & Archive ZAP report')
method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
method(name: 'catchError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
method(name: 'dockerNode', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
method(name: 'dockerNode', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'connector', type: 'Map'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'dockerHost', type: 'java.lang.String'), parameter(name: 'remoteFs', type: 'java.lang.String'), ], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
method(name: 'gitChangelog', type: 'Object', params: [:], doc: 'Changelog from Git repository')
method(name: 'gitChangelog', type: 'Object', namedParams: [parameter(name: 'customIssues', type: 'Map'), parameter(name: 'dateFormat', type: 'java.lang.String'), parameter(name: 'extendedVariables', type: 'Map'), parameter(name: 'from', type: 'Map'), parameter(name: 'gitHub', type: 'Map'), parameter(name: 'gitLab', type: 'Map'), parameter(name: 'ignoreCommitsIfMessageMatches', type: 'java.lang.String'), parameter(name: 'ignoreCommitsIfOlderThan', type: 'java.lang.String'), parameter(name: 'ignoreCommitsWithoutIssue', type: 'java.lang.Boolean'), parameter(name: 'ignoreTagsIfNameMatches', type: 'java.lang.String'), parameter(name: 'jira', type: 'Map'), parameter(name: 'noIssueName', type: 'java.lang.String'), parameter(name: 'readableTagName', type: 'java.lang.String'), parameter(name: 'removeIssueFromMessage', type: 'java.lang.Boolean'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'returnType', type: 'Map'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeZone', type: 'java.lang.String'), parameter(name: 'to', type: 'Map'), parameter(name: 'untaggedName', type: 'java.lang.String'), ], doc: 'Changelog from Git repository')
method(name: 'gitlabBuilds', type: 'Object', params: [body:'Closure'], doc: 'Notify gitlab about pending builds')
method(name: 'gitlabBuilds', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'builds', type: 'Map'), ], doc: 'Notify gitlab about pending builds')
method(name: 'gitlabCommitStatus', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Update the commit status in GitLab depending on the build status')
method(name: 'gitlabCommitStatus', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'builds', type: 'Map'), parameter(name: 'connection', type: 'Map'), ], doc: 'Update the commit status in GitLab depending on the build status')
method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'Map'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'multipartName', type: 'java.lang.String'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'uploadFile', type: 'java.lang.String'), parameter(name: 'useSystemProperties', type: 'java.lang.Boolean'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
method(name: 'importZapScanPolicy', type: 'Object', params: [policyPath:'java.lang.String'], doc: 'Import a ZAP scan policy from the specified path')
method(name: 'importZapUrls', type: 'Object', params: [path:'java.lang.String'], doc: 'Load a list of URLs for ZAP to use from the specified path')
method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'Map'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
method(name: 'mattermostSend', type: 'Object', params: [message:'java.lang.String'], doc: 'Send Mattermost message')
method(name: 'mattermostSend', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'channel', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'endpoint', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Send Mattermost message')
method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')
method(name: 'publishIssues', type: 'Object', params: [issues:'Map'], doc: 'Publish issues created by a static analysis scan')
method(name: 'publishIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'failedNewAll', type: 'int'), parameter(name: 'failedNewHigh', type: 'int'), parameter(name: 'failedNewLow', type: 'int'), parameter(name: 'failedNewNormal', type: 'int'), parameter(name: 'failedTotalAll', type: 'int'), parameter(name: 'failedTotalHigh', type: 'int'), parameter(name: 'failedTotalLow', type: 'int'), parameter(name: 'failedTotalNormal', type: 'int'), parameter(name: 'healthy', type: 'int'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ignoreFailedBuilds', type: 'boolean'), parameter(name: 'ignoreQualityGate', type: 'boolean'), parameter(name: 'minimumSeverity', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'qualityGates', type: 'Map'), parameter(name: 'referenceJobName', type: 'java.lang.String'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'unhealthy', type: 'int'), parameter(name: 'unstableNewAll', type: 'int'), parameter(name: 'unstableNewHigh', type: 'int'), parameter(name: 'unstableNewLow', type: 'int'), parameter(name: 'unstableNewNormal', type: 'int'), parameter(name: 'unstableTotalAll', type: 'int'), parameter(name: 'unstableTotalHigh', type: 'int'), parameter(name: 'unstableTotalLow', type: 'int'), parameter(name: 'unstableTotalNormal', type: 'int'), ], doc: 'Publish issues created by a static analysis scan')
method(name: 'readCSV', type: 'Object', params: [:], doc: 'Read content from a CSV file in the workspace.')
method(name: 'readCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'format', type: 'Map'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read content from a CSV file in the workspace.')
method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
method(name: 'runZapAttack', type: 'Object', namedParams: [parameter(name: 'scanPolicyName', type: 'java.lang.String'), parameter(name: 'userId', type: 'int'), ], doc: 'Run ZAP attack by changing to attack mode and starting the attack')
method(name: 'runZapCrawler', type: 'Object', params: [host:'java.lang.String'], doc: 'Run ZAP crawler on a specified host')
method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
method(name: 'startZap', type: 'Object', namedParams: [parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'port', type: 'int'), parameter(name: 'timeout', type: 'int'), parameter(name: 'zapHome', type: 'java.lang.String'), parameter(name: 'allowedHosts', type: 'Map'), parameter(name: 'sessionPath', type: 'java.lang.String'), ], doc: 'Start ZAP process')
method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'unstable', type: 'Object', params: [message:'java.lang.String'], doc: 'Set stage result to unstable')
method(name: 'updateGitlabCommitStatus', type: 'Object', params: [:], doc: 'Update the commit status in GitLab')
method(name: 'updateGitlabCommitStatus', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Update the commit status in GitLab')
method(name: 'vault', type: 'Object', params: [:], doc: 'VaultReadStep')
method(name: 'vault', type: 'Object', namedParams: [parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'engineVersion', type: 'java.lang.String'), parameter(name: 'key', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'vaultUrl', type: 'java.lang.String'), ], doc: 'VaultReadStep')
method(name: 'waitForQualityGate', type: 'Object', params: [abortPipeline:'boolean'], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
method(name: 'waitForQualityGate', type: 'Object', namedParams: [parameter(name: 'abortPipeline', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'webhookSecretId', type: 'java.lang.String'), ], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
method(name: 'warnError', type: 'Object', params: [message:java.lang.String, body:'Closure'], doc: 'Catch error and set build and stage result to unstable')
method(name: 'warnError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), ], doc: 'Catch error and set build and stage result to unstable')
method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')
method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')
method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
property(name: 'publishConfluence', type: 'com.myyearbook.hudson.plugins.confluence.ConfluenceDSL')
property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
property(name: 'GetBranchesFromGitlab', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'GetVersionsFromNexus', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLEnforce', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLModule', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLModuleEnabled', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLModulePostStep', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLModulesPath', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLPipeline', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLPipelineConfig', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLPipelineConfigMerge', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLPostStep', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'MPLPostStepsRun', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'cliDeployPipeline', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'sbBuildReleasePipeline', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'sbDeployPipeline', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
property(name: 'wikiChangelogReleaseTestPipeline', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
method(name: 'ansiblePlaybook', type: 'Object', params: [playbook:'java.lang.String'], doc: 'Invoke an ansible playbook')
method(name: 'ansiblePlaybook', type: 'Object', namedParams: [parameter(name: 'playbook', type: 'java.lang.String'), parameter(name: 'become', type: 'boolean'), parameter(name: 'becomeUser', type: 'java.lang.String'), parameter(name: 'colorized', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'disableHostKeyChecking', type: 'boolean'), parameter(name: 'dynamicInventory', type: 'boolean'), parameter(name: 'extraVars', type: 'java.util.Map'), parameter(name: 'extras', type: 'java.lang.String'), parameter(name: 'forks', type: 'int'), parameter(name: 'hostKeyChecking', type: 'boolean'), parameter(name: 'installation', type: 'java.lang.String'), parameter(name: 'inventory', type: 'java.lang.String'), parameter(name: 'inventoryContent', type: 'java.lang.String'), parameter(name: 'limit', type: 'java.lang.String'), parameter(name: 'skippedTags', type: 'java.lang.String'), parameter(name: 'startAtTask', type: 'java.lang.String'), parameter(name: 'sudo', type: 'boolean'), parameter(name: 'sudoUser', type: 'java.lang.String'), parameter(name: 'tags', type: 'java.lang.String'), parameter(name: 'vaultCredentialsId', type: 'java.lang.String'), ], doc: 'Invoke an ansible playbook')
method(name: 'ansibleVault', type: 'Object', params: [:], doc: 'Invoke ansible vault')
method(name: 'ansibleVault', type: 'Object', namedParams: [parameter(name: 'action', type: 'java.lang.String'), parameter(name: 'content', type: 'java.lang.String'), parameter(name: 'input', type: 'java.lang.String'), parameter(name: 'installation', type: 'java.lang.String'), parameter(name: 'newVaultCredentialsId', type: 'java.lang.String'), parameter(name: 'output', type: 'java.lang.String'), parameter(name: 'vaultCredentialsId', type: 'java.lang.String'), ], doc: 'Invoke ansible vault')
method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Check out from version control')
method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), ], doc: 'Archive JUnit-formatted test results')
method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Script')
method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
method(name: 'recordIssues', type: 'Object', params: [:], doc: 'Record compiler warnings and static analysis results')
method(name: 'recordIssues', type: 'Object', namedParams: [parameter(name: 'aggregatingResults', type: 'boolean'), parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'enabledForFailure', type: 'boolean'), parameter(name: 'failedNewAll', type: 'int'), parameter(name: 'failedNewHigh', type: 'int'), parameter(name: 'failedNewLow', type: 'int'), parameter(name: 'failedNewNormal', type: 'int'), parameter(name: 'failedTotalAll', type: 'int'), parameter(name: 'failedTotalHigh', type: 'int'), parameter(name: 'failedTotalLow', type: 'int'), parameter(name: 'failedTotalNormal', type: 'int'), parameter(name: 'filters', type: 'Map'), parameter(name: 'healthy', type: 'int'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ignoreFailedBuilds', type: 'boolean'), parameter(name: 'ignoreQualityGate', type: 'boolean'), parameter(name: 'minimumSeverity', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'qualityGates', type: 'Map'), parameter(name: 'referenceJobName', type: 'java.lang.String'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'tool', type: 'Map'), parameter(name: 'toolProxies', type: 'Map'), parameter(name: 'tools', type: 'Map'), parameter(name: 'unhealthy', type: 'int'), parameter(name: 'unstableNewAll', type: 'int'), parameter(name: 'unstableNewHigh', type: 'int'), parameter(name: 'unstableNewLow', type: 'int'), parameter(name: 'unstableNewNormal', type: 'int'), parameter(name: 'unstableTotalAll', type: 'int'), parameter(name: 'unstableTotalHigh', type: 'int'), parameter(name: 'unstableTotalLow', type: 'int'), parameter(name: 'unstableTotalNormal', type: 'int'), ], doc: 'Record compiler warnings and static analysis results')
method(name: 'rtp', type: 'Object', params: [:], doc: 'Publish rich text message')
method(name: 'rtp', type: 'Object', namedParams: [parameter(name: 'abortedAsStable', type: 'boolean'), parameter(name: 'abortedText', type: 'java.lang.String'), parameter(name: 'failedAsStable', type: 'boolean'), parameter(name: 'failedText', type: 'java.lang.String'), parameter(name: 'nullAction', type: 'java.lang.String'), parameter(name: 'parserName', type: 'java.lang.String'), parameter(name: 'stableText', type: 'java.lang.String'), parameter(name: 'unstableAsStable', type: 'boolean'), parameter(name: 'unstableText', type: 'java.lang.String'), ], doc: 'Publish rich text message')
method(name: 'scanForIssues', type: 'Object', params: [:], doc: 'Scan files or the console log for warnings or issues')
method(name: 'scanForIssues', type: 'Object', namedParams: [parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'filters', type: 'Map'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'tool', type: 'Map'), ], doc: 'Scan files or the console log for warnings or issues')
method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
method(name: 'sshCommand', type: 'Object', params: [command:'java.lang.String'], doc: 'SSH Steps: sshCommand - Execute command on remote node.')
method(name: 'sshCommand', type: 'Object', namedParams: [parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'remote', type: 'java.util.Map'), parameter(name: 'sudo', type: 'boolean'), ], doc: 'SSH Steps: sshCommand - Execute command on remote node.')
method(name: 'sshGet', type: 'Object', namedParams: [parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'into', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'filterBy', type: 'java.lang.String'), parameter(name: 'filterRegex', type: 'java.lang.String'), parameter(name: 'override', type: 'boolean'), parameter(name: 'remote', type: 'java.util.Map'), ], doc: 'SSH Steps: sshGet - Get a file\/directory from remote node.')
method(name: 'sshPut', type: 'Object', namedParams: [parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'into', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'filterBy', type: 'java.lang.String'), parameter(name: 'filterRegex', type: 'java.lang.String'), parameter(name: 'remote', type: 'java.util.Map'), ], doc: 'SSH Steps: sshPut - Put a file\/directory on remote node.')
method(name: 'sshRemove', type: 'Object', params: [path:'java.lang.String'], doc: 'SSH Steps: sshRemove - Remove a file\/directory from remote node.')
method(name: 'sshRemove', type: 'Object', namedParams: [parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'remote', type: 'java.util.Map'), ], doc: 'SSH Steps: sshRemove - Remove a file\/directory from remote node.')
method(name: 'sshScript', type: 'Object', params: [script:'java.lang.String'], doc: 'SSH Steps: sshScript - Execute script(file) on remote node.')
method(name: 'sshScript', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'remote', type: 'java.util.Map'), ], doc: 'SSH Steps: sshScript - Execute script(file) on remote node.')
method(name: 'sshagent', type: 'Object', params: [credentials:Map, body:'Closure'], doc: 'SSH Agent')
method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'Map'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
method(name: 'writeCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'records', type: 'Map'), parameter(name: 'format', type: 'Map'), ], doc: 'Write content to a CSV file in the workspace.')
method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), parameter(name: 'pretty', type: 'int'), ], doc: 'Write JSON to a file in the workspace.')
method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), ], doc: 'Write a yaml from an object.')
method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'commandLine', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')
method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
method(name: 'withDockerRegistry', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'registry', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Sets up Docker registry endpoint')
method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }
}

// Errors on:
// class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep: There's no @DataBoundConstructor on any constructor of class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep
