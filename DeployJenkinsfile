def groupId = 'com.luxhub.agora'
def artifactId = 'marketplace-front'
def mvnCoordinates = "${groupId}:${artifactId}:${params.version}:zip:bin"
def artifactFile = "${artifactId}-${params.version}-bin.zip"
def repo = params.version.endsWith('-SNAPSHOT')
        ? [nexusId: 'nexus-snapshots', layout: 'default', nexusUrl: 'https://nexus.luxhub.local:9443/repository/maven-snapshots']
        : [nexusId: 'nexus-releases', layout: 'default', nexusUrl: 'https://nexus.luxhub.local:9443/repository/maven-releases']
def sshCredentials = ['5bf76f15-b91a-4eb5-ae97-4f7481b6d06c']
def execAsApache = 'sudo -u apache'
def targetComponents = (params.target as String).split(' - ')
def targetUrl = targetComponents[0].trim()
def targetServer = targetComponents[1].trim()
def targetPath = "/opt/axway/apiportal/${targetComponents[2].trim()}"
def sshCmd = "ssh -o StrictHostKeyChecking=no"
def sshOrig = "jenk2adm@${env.JENKINS_URL.contains('prd') ? 'jump-prd.luxhub.local' : 'jump-dev.luxhub.local'}"
def sshDest = "jenk2adm@${(targetServer as String).split(':')[0]}"

pipeline {

    agent {
        label 'master'
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'version', defaultValue: '0.0.1-SNAPSHOT', description: 'Version to deploy')
        choice(name: 'target', choices: [
            'https://marketplace-din-unstable.luxhub.local/ - port2-dev.luxhub.local:446 - htdoc_mktp_dindix',
            'https://marketplace-din-stable.luxhub.local/ - port1-dev.luxhub.local:446 - htdoc_mktp_dindix',
            'https://marketplace-stg-unstable.luxhub.local/ - port2-dev.luxhub.local:447 - htdoc_mktp_stgstx',
            'https://marketplace-stg-stable.luxhub.local/ - port1-dev.luxhub.local:447 - htdoc_mktp_stgstx'
        ], description: 'Server where to deploy')
        booleanParam(name: 'cleanup', defaultValue: false, description: 'Cleanup deployment directory of its existing files')
    }

    stages {
        stage('Download') {
            tools {
                maven 'maven-3.6.0'
            }
            steps {
                echo "Downloading ${mvnCoordinates} to ${artifactFile}"
                script {
                    def packageJson = readJSON file: 'package.json'
                    echo packageJson.name
                    echo packageJson.version
                    echo packageJson.description
                    def mvnCmd = 'mvn -s /opt/jenkins/home/maven-settings.xml -B' // TODO replace -B by --no-transfer-progress on Maven 3.6.1+
                    // Get artifact into local repo
                    sh "${mvnCmd} dependency:get -DremoteRepositories=${repo.nexusId}::${repo.layout}::${repo.nexusUrl} -Dartifact=${mvnCoordinates}"
                    // Copy artifact from local repo to current directory
                    sh "${mvnCmd} dependency:copy -Dartifact=${mvnCoordinates} -DoutputDirectory=/tmp -Dmdep.useBaseVersion -Dmdep.overIfNewer"
                    sh "chmod 666 /tmp/${artifactFile}"
                    sh "ls -l /tmp/${artifactFile}"
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying ${artifactFile} to ${targetUrl}"
                sshagent(sshCredentials) {
                    echo "Copy file to '${sshDest}:/tmp/${artifactFile}'"
                    sh """
                        ${sshCmd} ${sshOrig} 'scp /tmp/${artifactFile} ${sshDest}:/tmp/${artifactFile}'
                        ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} 'ls -l /tmp/${artifactFile}'"
                        ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} 'chmod 666 /tmp/${artifactFile}'"
                    """
                    script {
                        if (params.cleanup) {
                            echo 'Cleaning deployment directory'
                            sh """
                                ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} '${execAsApache} ls -lha ${targetPath}' || true"
                                ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} '${execAsApache} rm -rf ${targetPath}' || true"
                                ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} '${execAsApache} ls -lha ${targetPath}' || true"
                            """
                        }
                    }

                    echo "Unzip to ${targetPath}"
                    sh """
                        ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} '${execAsApache} unzip -uo /tmp/${artifactFile} -d ${targetPath}'"
                        ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} '${execAsApache} ls -lha ${targetPath}'"
                        ${sshCmd} ${sshOrig} "${sshCmd} ${sshDest} 'rm -rf /tmp/${artifactFile}' || true"
                    """
                }
            }
        }

        stage('Verify') {
            steps {
                echo 'Waiting 1 second...'
                sleep 1
                echo "Verify deployed web application on '${targetUrl}'"
                script {
                    sshagent(sshCredentials) {
                        def statusCode = sh (
                                script: "curl -k -L -s -o /dev/null -w '%{http_code}' ${targetUrl}",
                                returnStdout: true
                        ).trim()
                        if (statusCode != '200') {
                            error "Call to '${targetUrl}' failed with status: ${statusCode}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def groupPath = groupId.replace('.', '/')
                def actualVersion = version.endsWith('-SNAPSHOT')
                        ? sh (script: "curl -k ${repo.nexusUrl}/${groupPath}/${artifactId}/${version}/maven-metadata.xml | grep '<value>' | head -1 | sed 's/<value>\\(.*\\)<\\/value>/\\1/'", returnStdout: true).trim()
                        : version;
                def actualLocation = "${repo.nexusUrl}/${groupPath}/${artifactId}/${version}/${artifactId}-${actualVersion}-bin.zip"

                mail subject: "${artifactFile} DEPLOYED to ${target}",
                        from: 'Jenkins <jenkins@luxhub.com>',
                        to: 'patrice.jacquot@luxhub.com',
                        mimeType: 'text/html',
                        body: """
                            <html><body>
                            <h1>${currentBuild.currentResult}: ${env.JOB_BASE_NAME}</h1>
                            <h2>Suggested action</h2>
                            <p>Test the new features of the application: <a href="${targeUrl}">${targeUrl}</a> (<a href="https://${targetServer}/">https://${targetServer}/</a>).</p>
                            <h2>Execution</h2>
                            <p>
                                <a href="${env.BUILD_URL}">Build <strong>#${env.BUILD_NUMBER}</strong></a> of the job <strong>${env.JOB_NAME}</strong>
                                ran on the branch <strong>${params['git.branch']}</strong>.
                            </p>
                            <h2>Outcome</h2>
                            <p>
                                Artifact <strong>${mvnCoordinates}</strong> from <strong>${repo.nexusId}</strong> has been deployed to <strong>${targetServer}</strong>.
                            </p>
                            </body></html>
                          """
            }
        }
        always {
            deleteDir()
        }
    }
}
